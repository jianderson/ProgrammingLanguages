/*
let rec member = \elem. \list.
    if (hd list) = elem then 1 else
        if (tl list) = # then 0 else
            member elem (tl list)
in
member 3 2:1:3:#



let rec remove = \elem. \list.
    if (tl list) = # then (hd list) else
        if (hd list) = elem then (tl list) else
            (hd list) : (remove (elem) (tl list))
in
remove 3 2:3:1:#



let rec sum = \list.
    if (hd list) = (tl list) then 0 else
    if (tl list) = # then (hd list) else
        (hd (list)) + (sum (tl (list)))
in
sum 1:2:3:x:#


let rec prod = \list.
    if (hd list) = (tl list) then 0 else
    if (tl list) = # then (hd list) else
        (hd (list)) * (prod (tl (list)))
in
prod 1:2:3:4:#
    if (tl list) = # then 0 else


let plus_two = \int.
    (2) + (int)
in
plus_two x


let plus_two = \int.
    (2) + (int)
in
let rec map = \func. \list.
    if list = # then # else
        (func (hd list)) : (map func (tl list))
in
map plus_two 1:2:3:#





let rec insert = \elem. \list.
    if elem less_equal (hd list) = 1 then (elem:(hd list):(tl list)) else
        (hd list) : (insert elem (tl list))
in
insert 3 2:4:5:#
if (hd (tl list)) less_equal (hd list) = 1 then (sort (tl list)) : (hd list) else (hd list) : (sort (tl list)) --delete this 

*/

let rec insert = \elem. \list.
    if elem less_equal (hd list) = 1 then (elem:(hd list):(tl list)) else
        (hd list) : (insert elem (tl list))
in
let rec sort = \list.
    insert (hd list) (sort (tl list))
in
sort 1:2:3:1:2:3:#

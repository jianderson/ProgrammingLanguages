let rec member = \elem. \list.
    if list = # then 0 else
    if (hd list) = elem then 1 else
        if (tl list) = # then 0 else
            member elem (tl list)
in
member 1 2:3:1:#

;;

let rec remove = \elem. \list.
    if list = # then # else
    if (tl list) = # then (hd list) else
        if (hd list) = elem then (tl list) else
            (hd list) : (remove (elem) (tl list))
in
remove 2 1:2:3:1:2:3:#

;;

let rec sum = \list.
    if list = # then 0 else
    if (hd list) = (tl list) then 0 else
    if (tl list) = # then (hd list) else
        (hd (list)) + (sum (tl (list)))
in
sum 1:2:3:4:#

;;

let rec prod = \list.
    if list = # then 0 else
    if (hd list) = (tl list) then 0 else
    if (tl list) = # then (hd list) else
        (hd (list)) * (prod (tl (list)))
in
prod 1:2:3:4:#

;;

let plus_two = \int.
    (2) + (int)
in
plus_two 3

;;

let plus_two = \int.
    (2) + (int)
in
let rec map = \func. \list.
    if list = # then # else
        (func (hd list)) : (map func (tl list))
in
map plus_two 1:2:3:4:#

;;

let rec insert = \elem. \list.
    if list = # then elem : # else
    if elem less_equal (hd list) = 1 then (elem:(hd list):(tl list)) else
        (hd list) : (insert elem (tl list))
in
insert 3 #

/*

let rec insert = \elem. \list.
    if elem less_equal (hd list) = 1 then elem:list else
        (hd list) : (insert elem (tl list))
in
let rec sort = \list.
    insert (hd list) (sort (tl list))
in
sort 1:2:3:1:2:3:#
*/

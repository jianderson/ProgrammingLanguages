/*
let rec member = \elem. \list.
    if (hd list) = elem then 1 else
        if (tl list) = # then 0 else
            member elem (tl list)
in
member 3 2:1:3:#


let rec remove = \elem. \list.
    if (hd list) = elem then (tl list) else
        if (tl list) = # then (hd list) else
            remove elem (tl list)
in
remove 4 2:3:1:#



let rec sum = \list. 
    if (hd list) = (tl list) then 0 else
    if (tl list) = # then (hd list) else
        (hd (list)) + (sum (tl (list)))
in
sum 1:2:3:x:#
*/

let rec prod = \list.
    if (hd list) = (tl list) then 0 else
    if (tl list) = # then (hd list) else
        (hd (list)) * (prod (tl (list)))
in
prod 1:2:3:4:# 

/*
let plus_two = \int.
    EPlus (2) (int)
in
plus_two 5
*/

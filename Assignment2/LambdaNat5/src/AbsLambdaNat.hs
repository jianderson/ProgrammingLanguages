-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language LambdaNat5.

module AbsLambdaNat where

import Prelude (Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Program = Prog [Exp]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Exp
    = EAbs Id Exp
    | EIf Exp Exp Exp Exp
    | ELet Id Exp Exp
    | ERec Id Exp Exp
    | EHd Exp
    | ETl Exp
    | ELE Exp Exp
    | EPlus Exp Exp
    | EMinus Exp Exp
    | ETimes Exp Exp
    | EApp Exp Exp
    | ENil
    | ECons Exp Exp
    | EInt Integer
    | EVar Id
    | EFix Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Id = Id String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)


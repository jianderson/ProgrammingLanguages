-- the simplest function
val id = \x.x ;;

-- we can use arithmetic on numbers
val plusone = \x. x+1;;

-- rec for recursive definitions, case instead of if-then-else
rec add = \x . \y. case x of { 
    0 -> y, 
    _ -> plusone (add (x-1) y)} ;;

-- pattern matching on lists
rec member = \x.\y. case y of { 
    [] -> false, 
    (a:as) -> case x == a of { true -> true, _ -> member x as } };;

-- remove
rec remove = \x. \y. case y of {
    [] -> [],
    (a:as) -> case x == a of {true -> as, _ -> (a) : (remove x as)}
};;

-- sum
rec sum = \x. case x of {
    [] -> [],
    (a:as) -> case as == [] of {true -> a, _ -> (a) + (sum as)}
};;

-- prod
rec prod = \x. case x of {
    [] -> [],
    (a:as) -> case as == [] of {true -> a, _ -> (a) * (prod as)}
};;

-- plustwo
val plustwo = \x. x+2;;

-- map
rec map = \x. \y. case y of {
    [] -> [],
    (a:as) -> (x(a)) : (map x(as))
};;

-- insert
rec insert = \x. \y. case y of {
    [] -> [x],
    (a:as) -> case x <= a of {true -> (x) : (a:as), _ -> (a) : (insert x as)}
};;

-- sort
rec sort = \x. case x of {
    [] -> [],
    (a:as) -> insert a (sort as)
};;